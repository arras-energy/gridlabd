// test_csv.glm

#set suppress_repeat_messages=FALSE
#option verbose
clock
{
    timezone America/Seattle;
    starttime "2020-01-01 00:00:00 PST";
    stoptime "2020-01-02 00:00:00 PST";
}

module optimize
{
    message_flags VERBOSE;
    cvx_backend CPP;
    cvx_options NONE;
    cvx_dpp DEFAULT;
    //cvx_solver CLARABEL;
    //cvx_solver CUSTOM;
    //cvx_custom_solver "test_cvx.py";
    cvx_warm_start FALSE;
    cvx_solver_options time_limit:0.0,max_iter:50;
    cvx_failure_handling HALT;
    cvx_imports Variable,sum_squares,Minimize;
    cvx_problemdump "test_csv.txt";
}

class test
{
    randomvar A0;
    randomvar A1;
    randomvar A2;
    randomvar A3;
    randomvar b0;
    randomvar b1;
    double x;
    double y;
    double mu;
    double lambda;
}

module pypower;

object test:..3
{
    parent problem-x;
    name `test_{id}`;
    groupid "test_group";
    A0 "type:normal(0,1);refresh:1h";
    A1 "type:normal(0,1);refresh:1h";
    A2 "type:normal(0,1);refresh:1h";
    A3 "type:normal(0,1);refresh:1h";
    b0 "type:normal(0,1);refresh:1h";
    b1 "type:normal(0,1);refresh:1h";
    x 0.0;
    y 0.0;
}

object cvx
{
    name "least-squares";
    event INIT;
    presolve "m=20; n=15; np.random.seed(1); A=np.random.rand(m,n); b=np.random.rand(m); x=Variable(n)";
    objective "Minimize(sum_squares(A@x-b))";
    postsolve "print('Residual 2-norm:',cvx.norm(A@x-b,p=2).value,file=__dump__,flush=True)";
}

object cvx 
{
    name "problem-x";
    event PRECOMMIT;
    //presolve "m=20; n=15; np.random.seed(1); A=np.random.rand(m,n); b=np.random.rand(m); x=Variable(n)";
    variables "x=test:x";
    // variables "y=test:y&lambda";
    // data "A=test.A0,test.A1,test.A2,test.A3;b1=test.b1;b2=test.b2";
    // variables "y=test:y"; // duplicate test
    // variables "p=pypower.bus:Pd,q=bus.Qd"; // class and module.class tests
    // variables "p=test_group@x"; // group test
    // variables "x=test.x&mu"; // duplicate error
    // variables "y=test.y"; // duplicate error
    // variables "z=test.z"; // not found error
    objective "Minimize(sum_squares(x))";
    constraints "x>=1";
    // constraints "x<=-1";
    // constraints "x<=1,y==2*x";
    // constraints "x>=2"; // makes the problem infeasible (for testing purposes)
    // postsolve "import sys;print(f'Optimal value is {__value__:.2f}',file=sys.stderr)";
    // postsolve "import sys; print('\\n'.join([f'{x}: {str(y)}' for x,y in __problem__.get_problem_data(__problem__.solver_stats.solver_name)[0].items()]),file=sys.stderr)";
}

object cvx 
{
    parent "problem-x";
    name "problem-y";
    event SYNC;
    variables "y=test:y";
    objective "Minimize(sum_squares(y-x))";
    constraints "y>=2";
}

#set savefile=${modelname/.glm/.json}

#ifexist "../test_csv.txt"
#on_exit 0 diff -I '^param_prob:' ../test_csv.txt test_csv.txt > gridlabd.diff
#endif

