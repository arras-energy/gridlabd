#define CASE=14
#ifexists "../case.glm"
#define DIR=..
#endif
#include "${DIR:-.}/case.glm"

module pypower
{
	maximum_timestep 3600;
#ifdef DIR
    controllers_path "${DIR}";
#endif
    controllers "controllers";
}

#for N in ${RANGE 1,14}
object pypower.load
{
    parent pp_bus_${N};
    Vn 12.5 kV;
    status ONLINE;
    controller "load_control";
}
#done

module tape
{
	csv_header_type NAME;
}

#set suppress_repeat_messages=FALSE
object multi_recorder
{
	file "test_case14_ts.csv";
#for N in ${RANGE 1,14}
	property "pp_bus_${N}:Pd,pp_bus_${N}:Qd";
#done
	interval -1;
}

clock
{
    timezone "PST+8PDT";
    starttime "2020-01-01 00:00:00 PST";
    stoptime "2020-01-02 00:00:00 PST";
}

module assert;
#define MRES=0.05 // magnitude test resolution
#define ARES=0.2 // angle test resolution

object assert
{
    parent pp_bus_1;
    target Vm;
    relation ==;
    value 1.060;
    within ${MRES};
}
object assert
{
    parent pp_bus_1;
    target Va;
    relation ==;
    value 0.00;
    within ${ARES};
}

object assert
{
    parent pp_bus_2;
    target Vm;
    relation ==;
    value 1.045;
    within ${MRES};
}
object assert
{
    parent pp_bus_2;
    target Va;
    relation ==;
    value -4.98;
    within ${ARES};
}

object assert
{
    parent pp_bus_3;
    target Vm;
    relation ==;
    value 1.010;
    within ${MRES};
}
object assert
{
    parent pp_bus_3;
    target Va;
    relation ==;
    value -12.72;
    within ${ARES};
}

object assert
{
    parent pp_bus_4;
    target Vm;
    relation ==;
    value 1.019;
    within ${MRES};
}
object assert
{
    parent pp_bus_4;
    target Va;
    relation ==;
    value -10.33;
    within ${ARES};
}

object assert
{
    parent pp_bus_5;
    target Vm;
    relation ==;
    value 1.020;
    within ${MRES};
}
object assert
{
    parent pp_bus_5;
    target Va;
    relation ==;
    value -8.78;
    within ${ARES};
}

object assert
{
    parent pp_bus_6;
    target Vm;
    relation ==;
    value 1.070;
    within ${MRES};
}
object assert
{
    parent pp_bus_6;
    target Va;
    relation ==;
    value -14.22;
    within ${ARES};
}

object assert
{
    parent pp_bus_7;
    target Vm;
    relation ==;
    value 1.062;
    within ${MRES};
}
object assert
{
    parent pp_bus_7;
    target Va;
    relation ==;
    value -13.37;
    within ${ARES};
}

object assert
{
    parent pp_bus_8;
    target Vm;
    relation ==;
    value 1.090;
    within ${MRES};
}
object assert
{
    parent pp_bus_8;
    target Va;
    relation ==;
    value -13.36;
    within ${ARES};
}

object assert
{
    parent pp_bus_9;
    target Vm;
    relation ==;
    value 1.056;
    within ${MRES};
}
object assert
{
    parent pp_bus_9;
    target Va;
    relation ==;
    value -14.94;
    within ${ARES};
}

object assert
{
    parent pp_bus_10;
    target Vm;
    relation ==;
    value 1.051;
    within ${MRES};
}
object assert
{
    parent pp_bus_10;
    target Va;
    relation ==;
    value -15.10;
    within ${ARES};
}

object assert
{
    parent pp_bus_11;
    target Vm;
    relation ==;
    value 1.057;
    within ${MRES};
}
object assert
{
    parent pp_bus_11;
    target Va;
    relation ==;
    value -14.79;
    within ${ARES};
}

object assert
{
    parent pp_bus_12;
    target Vm;
    relation ==;
    value 1.055;
    within ${MRES};
}
object assert
{
    parent pp_bus_12;
    target Va;
    relation ==;
    value -15.07;
    within ${ARES};
}

object assert
{
    parent pp_bus_13;
    target Vm;
    relation ==;
    value 1.050;
    within ${MRES};
}
object assert
{
    parent pp_bus_13;
    target Va;
    relation ==;
    value -15.16;
    within ${ARES};
}

object assert
{
    parent pp_bus_14;
    target Vm;
    relation ==;
    value 1.036;
    within ${MRES};
}
object assert
{
    parent pp_bus_14;
    target Va;
    relation ==;
    value -16.04;
    within ${ARES};
}

