// This test verifies that OPF updates Ps and Qs and does not change Pg and Qg

#define CASE=14
#ifexists "../case.glm"
#define DIR=..
#endif

module pypower
{
    enable_opf TRUE;
    save_case TRUE;
    save_format PY;
}

#include "${DIR:-.}/case.glm"

object powerplant
{
    parent pp_gen_1;
    fixed_cost 0.0;
    variable_cost 20.0;
    scarcity_cost 0.0430293;
}
object powerplant
{
    parent pp_gen_2;
    fixed_cost 0.0;
    variable_cost 20.0;
    scarcity_cost 0.25;
}
object powerplant
{
    parent pp_gen_3;
    fixed_cost 0.0;
    variable_cost 40.0;
    scarcity_cost 0.01;
}
object powerplant
{
    parent pp_gen_4;
    fixed_cost 0.0;
    variable_cost 40.0;
    scarcity_cost 0.01;
}
object powerplant
{
    parent pp_gen_5;
    fixed_cost 0.0;
    variable_cost 40.0;
    scarcity_cost 0.01;
}
#for GEN in ${RANGE 1,5}
modify pp_gen_${GEN}.Pg 0.0;
modify pp_gen_${GEN}.Qg 0.0;
#done

module assert;
#define MRES=0.001 // magnitude test resolution
#define ARES=0.01 // angle test resolution
#define PRES=0.1 // real power test resolution
#define QRES=0.2 // reactive power test resolution

object assert
{      
    parent pp_bus_1;
    target Vm;
    relation ==;
    value +1.195;
    within ${MRES};
}
object assert
{
    parent pp_bus_1;
    target Va;
    relation ==;
    value 0.00;
    within ${ARES};
}

object assert
{      
    parent pp_bus_2;
    target Vm;
    relation ==;
    value +1.204;
    within ${MRES};
}
object assert
{
    parent pp_bus_2;
    target Va;
    relation ==;
    value -0.33;
    within ${ARES};
}

object assert
{      
    parent pp_bus_3;
    target Vm;
    relation ==;
    value +1.217;
    within ${MRES};
}
object assert
{
    parent pp_bus_3;
    target Va;
    relation ==;
    value -3.41;
    within ${ARES};
}

object assert
{      
    parent pp_bus_4;
    target Vm;
    relation ==;
    value +1.233;
    within ${MRES};
}
object assert
{
    parent pp_bus_4;
    target Va;
    relation ==;
    value +1.21;
    within ${ARES};
}

object assert
{      
    parent pp_bus_5;
    target Vm;
    relation ==;
    value +1.217;
    within ${MRES};
}
object assert
{
    parent pp_bus_5;
    target Va;
    relation ==;
    value +0.22;
    within ${ARES};
}

object assert
{      
    parent pp_bus_6;
    target Vm;
    relation ==;
    value +1.350;
    within ${MRES};
}
object assert
{
    parent pp_bus_6;
    target Va;
    relation ==;
    value +0;
    within ${ARES};
}

object assert
{      
    parent pp_bus_7;
    target Vm;
    relation ==;
    value +1.285;
    within ${MRES};
}
object assert
{
    parent pp_bus_7;
    target Va;
    relation ==;
    value +1.51;
    within ${ARES};
}

object assert
{      
    parent pp_bus_8;
    target Vm;
    relation ==;
    value +1.308;
    within ${MRES};
}
object assert
{
    parent pp_bus_8;
    target Va;
    relation ==;
    value +1.51;
    within ${ARES};
}

object assert
{      
    parent pp_bus_9;
    target Vm;
    relation ==;
    value +1.285;
    within ${MRES};
}
object assert
{
    parent pp_bus_9;
    target Va;
    relation ==;
    value +1.67;
    within ${ARES};
}

object assert
{      
    parent pp_bus_10;
    target Vm;
    relation ==;
    value +1.306;
    within ${MRES};
}
object assert
{
    parent pp_bus_10;
    target Va;
    relation ==;
    value +3.53;
    within ${ARES};
}

object assert
{      
    parent pp_bus_11;
    target Vm;
    relation ==;
    value +1.342;
    within ${MRES};
}
object assert
{
    parent pp_bus_11;
    target Va;
    relation ==;
    value +2.81;
    within ${ARES};
}

object assert
{      
    parent pp_bus_12;
    target Vm;
    relation ==;
    value +1.35;
    within ${MRES};
}
object assert
{
    parent pp_bus_12;
    target Va;
    relation ==;
    value -0.62;
    within ${ARES};
}

object assert
{      
    parent pp_bus_13;
    target Vm;
    relation ==;
    value +1.31;
    within ${MRES};
}
object assert
{
    parent pp_bus_13;
    target Va;
    relation ==;
    value -1.89;
    within ${ARES};
}

object assert
{      
    parent pp_bus_14;
    target Vm;
    relation ==;
    value +1.266;
    within ${MRES};
}
object assert
{
    parent pp_bus_14;
    target Va;
    relation ==;
    value +0.22;
    within ${ARES};
}

object assert
{
    parent pp_gen_1;
    target Pg;
    relation ==;
    value 0;
    within ${PRES};
}

object assert
{
    parent pp_gen_1;
    target Qg;
    relation ==;
    value 0;
    within ${QRES};
}

object assert
{
    parent pp_gen_2;
    target Pg;
    relation ==;
    value 0;
    within ${PRES};
}

object assert
{
    parent pp_gen_2;
    target Qg;
    relation ==;
    value 0;
    within ${QRES};
}

object assert
{
    parent pp_gen_3;
    target Pg;
    relation ==;
    value 0;
    within ${PRES};
}

object assert
{
    parent pp_gen_3;
    target Qg;
    relation ==;
    value 0;
    within ${QRES};
}

object assert
{
    parent pp_gen_4;
    target Pg;
    relation ==;
    value 0;
    within ${PRES};
}

object assert
{
    parent pp_gen_4;
    target Qg;
    relation ==;
    value 0;
    within ${QRES};
}

object assert
{
    parent pp_gen_5;
    target Pg;
    relation ==;
    value 0;
    within ${PRES};
}

object assert
{
    parent pp_gen_5;
    target Qg;
    relation ==;
    value 0;
    within ${QRES};
}

