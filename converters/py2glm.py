import json 
import os 
import sys, getopt
import datetime
import importlib, copy
from importlib import util


config = {"input":"py","output":"glm","type":["pypower"]}

def help():
    return """py2glm.py -i <inputfile> -o <outputfile> [options...]
    -c|--config              output converter configuration data
    -h|--help                output this help
    -i|--ifile <filename>    [REQUIRED] PY input file
    -o|--ofile <filename>    [OPTIONAL] GLM output file name
    -t|--type                type of input file
"""

def main():
    filename_py = ''
    filename_glm = ''
    py_type = ''
    try : 
        opts, args = getopt.getopt(sys.argv[1:],"chi:o:t:",["config","help","ifile=","ofile=","type="])
    except getopt.GetoptError:
        sys.exit(2)
    if not opts : 
        print('Missing command arguments')
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-c","--config"):
            print(config)
            sys.exit()
        elif opt in ("-h","--help"):
            print(help())
            sys.exit()
        elif opt in ("-i", "--ifile"):
            filename_py = arg
        elif opt in ("-o", "--ofile"):
            filename_glm = arg
        elif opt in ("-t", "--type"):
            py_type = arg
        else : 
            error(f"{opt}={arg} is not a valid option")

    convert(ifile=filename_py,ofile=filename_glm,py_type=py_type)

def convert(ifile,ofile,py_type):
    """Default converter is pypower case"""
    assert(py_type in ['pypower',''])

    modspec = util.spec_from_file_location("glm",ifile)
    modname = os.path.splitext(ifile)[0]
    mod = importlib.import_module(modname)
    casedef = getattr(mod,os.path.basename(modname))
    data = casedef()

    NL='\n'
    with open(ofile,"w") as glm:
        glm.write(f"""// generated by {' '.join(sys.argv)}
module pypower
{{
    version {data['version']};
    baseMVA {data['baseMVA']};
}}
""")

        for name,spec in dict(
            # pypower properties must be in the save order as the case array columns
            bus = "bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin",
            gen = "bus Pg Qg Qmax Qmin Vg mBase status Pmax Pmin Pc1 Pc2 Qc1min Qc1max Qc2min Qc2max ramp_agc ramp_10 ramp_30 ramp_q apf",
            branch = "fbus tbus r x b rateA rateB rateC ratio angle status angmin angmax",
            # gencost = "TODO"
        ).items():
            for line in data[name]:
                glm.write(f"""object {name} 
{{
{NL.join([f"    {x} {line[n]};" for n,x in enumerate(spec.split())])}
}}
""")

if __name__ == '__main__':
    main()

