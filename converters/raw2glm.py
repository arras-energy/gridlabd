import json 
import os 
import sys, getopt
import datetime
import importlib, copy
from importlib import util
import csv
from math import cos, sin
from collections import namedtuple

if os.path.exists("autotest/wecc240.raw") and len(sys.argv) == 1:
    sys.argv.extend(["-i","autotest/wecc240.raw","-o","autotest/wecc240.glm"])

config = {"input":"raw","output":"glm","type":[],"format":[]}

def help():
    return """raw2glm.py -i <inputfile> -o <outputfile> [options...]
    -c|--config               output converter configuration data
    -h|--help                 output this help
    -i|--ifile <FILENAME.raw> [REQUIRED] PY input file
    -o|--ofile <FILENAME.glm> [OPTIONAL] GLM output file name
    -N|--name <STRING>        [OPTIONAL] object name prefix (default is output
                              file name)
"""

E_OK = 0
E_SYNTAX = 1
E_MISSING = 2
E_EXCEPTION = 9
def error(msg,file="raw2glm.py",lineno=None,exitcode=None):
    if lineno is None:
        print(f"ERROR [{file}]: {msg}",file=sys.stderr,flush=True)
    else:
        print(f"ERROR [{file}@{lineno}]: {msg}",file=sys.stderr,flush=True)
    if not exitcode is None:
        sys.exit(exitcode)

def warning(msg,file="raw2glm.py",lineno=None):
    if lineno is None:
        print(f"WARNING [{file}]: {msg}",file=sys.stderr,flush=True)
    else:
        print(f"WARNING [{file}@{lineno}]: {msg}",file=sys.stderr,flush=True)

def main():
    filename_raw = None
    filename_glm = None
    prefix = None
    try : 
        opts, args = getopt.getopt(sys.argv[1:],
            "chi:o:N:",
            ["config","help","ifile=","ofile=",'name='],
            )
    except getopt.GetoptError:
        sys.exit(E_MISSING)
    if not opts : 
        error("missing command arguments",exitcode=E_MISSING)
    for opt, arg in opts:
        if opt in ("-c","--config"):
            print(config)
            sys.exit(E_OK)
        elif opt in ("-h","--help"):
            print(help())
            sys.exit(E_OK)
        elif opt in ("-i", "--ifile"):
            filename_raw = arg
        elif opt in ("-o", "--ofile"):
            filename_glm = arg
        elif opt in ("-N", "--name"):
            prefix = arg
        else : 
            error("{opt}={arg} is not a valid option",exitcode=E_SYNTAX)

    if not filename_raw:
        error("input filename not specified",exitcode=E_MISSING)

    try:
        convert(
            ifile = filename_raw,
            ofile = filename_glm,
            options = dict(prefix = prefix),
            )
    except Exception as err:
        error(err)
        import traceback
        traceback.print_exception(err,file=sys.stderr)
        sys.exit(E_EXCEPTION)

def convert(ifile,ofile,options={}):
    """Default converter PSS/E RAW file (version 34-ish)"""

    data = dict(
        version = 2, 
        baseMVA = 100.0,
        comment = '',
        bus = [],
        branch = [],
        gen = [],
        )

    busndx = {}
    genndx = {}
    branchndx = {}
    xfrmndx = {}
    bus_S = {}
    bus_V = {}
    oname = options['prefix'] if 'prefix' in options and not options['prefix'] is None else os.path.splitext(os.path.basename(ofile))[0]
    with open(ofile,"w") as glm:

        print(f"// generated by {' '.join(sys.argv)}",file=glm)
        with open(ifile,"r") as raw:

            reader = csv.reader(raw,delimiter=',',quotechar="'")
            block = None
            lineno = 0
            fields = {}
            items = lambda row: "// No fields provided"
            rows = []
            rowd = []
            ocount = {}
            for values in reader:
                lineno += 1
                row = [x.strip() for x in values]

                if row[0].startswith("@!"): # comment
                    # breakpoint()
                    if block:
                        if block in fields:
                            fields[block].extend([x.strip().replace(' ','').replace('@!','') for x in row])
                            row[0] = row[0][2:].strip()
                            rows.append(list(row))
                        else:
                            fields[block] = [x.strip().replace(' ','') for x in row]
                            row[0] = row[0][2:].strip()
                            rows = [list(row)]
                        if fields[block][0].startswith("@!"):
                            fields[block][0] = fields[block][0][2:].strip()
                    if block in fields:
                        items = lambda row:"\n    ".join([f"// {x} = {y};" for x,y in zip(fields[block],row)])
                    else:
                        items = lambda row: "// No fields provided"

                elif row[0] == '0': # system-wide data
                
                    block = 'SYSTEM_DATA'
                    print(f"""module pypower 
{{
    // {block} = {row}
    version 2;
    baseMVA {row[1]};
    // {row[5]}
}}
""",file=glm)
                    data['baseMVA'] = float(row[1])
                    comment = row[5]
                
                elif row[0].startswith('0 / END'): # next data block
                
                    if len(row) > 1 and row[1].startswith("BEGIN "):
                        block = row[1][6:].replace(' ','_')
                    else:
                        block = None
                
                elif block == 'SYSTEM_DATA':
                    print(f"// {row[0]}",file=glm);
                
                elif block == 'BUS_DATA':

                    # PSSE: id,name,baseKV,type,area,zone,Vm,Va,gen.r,gen.i,ld.r,ld.i
                    # GLM: "bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin",
                    bus_i = len(busndx)+1
                    busndx[row[0]] = bus_i
                    bus_S[row[0]] = complex(0,0)
                    Vm = float(row[7])
                    Va = float(row[8])
                    bus_V[row[0]] = complex(Vm*cos(Va*3.1416/180),Vm*sin(Va*3.1416/180))
                    typemap = ['UNKNOWN','PQ','PV','REF','NONE','PQREF'] # map PSSE bus types to pypower bus types
                    print(f"""object pypower.bus 
{{
    name "{oname}_N_{row[0]}"; 
    bus_i {bus_i};
    baseKV {row[2]} kV;
    type {typemap[int(row[3])]}; 
    area {row[4]};
    zone {row[5]};
    Vm {row[7]} pu*V;
    Va {row[8]} deg;
    Pd {float(row[9])-float(row[11])} MW;
    Qd {float(row[10])-float(row[12])} MVAr;
    {items(row)};
}}""",file=glm)

                elif block == 'LOAD_DATA':

                    if not row[0] in busndx:
                        warning(f"load '{row[0]}' not a valid bus index",ifile,lineno)

                    # PSSE: I,'ID',STAT,AREA,ZONE,      PL,        QL,        IP,        IQ,        YP,        YQ, OWNER,SCALE,INTRPT,  DGENP,     DGENQ, DGENF
                    try:
                        Z = complex(1,0)/complex(float(row[9]),float(row[10]))
                    except:
                        Z = complex(0,0)
                    I = complex(float(row[7]),float(row[8]))
                    P = complex(float(row[5]),float(row[6])) + complex(float(row[14]),float(row[15]))
                    response = 1 - float(row[12])
                    status = "ONLINE" if float(row[13]) == 0.0 else "CURTAILED"
                    V = bus_V[row[0]]
                    bus_S[row[0]] += P + V*I.conjugate()
                    if Z.real != 0.0 and Z.imag != 0.0:
                        bus_S[row[0]] += V.conjugate()*V/Z.conjugate()
                    print(f"""object pypower.load
{{
    name "{oname}_L_{row[0]}";
    parent "{oname}_N_{row[0]}";
    status "{"ONLINE" if row[2] == 1 else "OFFLINE"}";
    Z {Z.real:.4g}{Z.imag:+.4g}j Ohm;
    I {I.real:.4g}{I.imag:+.4g}j A;
    P {P.real:.4g}{P.imag:+.4g}j MVA;
    status {status};
    response {response};
    {items(row)}
}}
modify {oname}_N_{row[0]}.Pd {bus_S[row[0]].real:.6g};
modify {oname}_N_{row[0]}.Qd {bus_S[row[0]].imag:.6g};
""",file=glm)

                elif block == "GENERATOR_DATA":

                    genid = int(row[0])
                    genndx[genid] = genndx[genid]+1 if genid in genndx else 0
                    if not row[0] in busndx:
                        warning(f"gen '{row[0]}' not a valid bus index",ifile,lineno)
                    # PSSE: I,'ID', PG, QG, QT, QB, VS, IREG, MBASE, ZR, ZX, RT, XT, GTAP, STAT, RMPCT, PT, PB, O1, F1, O2, F2, O3, F3, O4, F4, WMOD, WPF, NREG
                    print(f"""object pypower.gen
{{
    name "{oname}_G_{row[0]}_{genndx[genid]}";
    bus {busndx[row[0]]};
    Pg {row[2]} MW;
    Qg {row[3]} MVAr;
    Vg {row[6]} pu*V;
    Pmax {row[16]} MW;
    Pmin {row[17]} MW;
    Qmax {row[4]} MVAr;
    Qmin {row[5]} MVAr;
    status {"IN_SERVICE" if row[14] == "1" else "OUT_OF_SERVICE"};
    {items(row)}
}}""",file=glm)

                elif block == "BRANCH_DATA":

                    branchid = f"{row[0]}_{row[1]}"
                    branchndx[branchid] = branchndx[branchid]+1 if branchid in branchndx else 0
                    if not row[0] in busndx or not row[1] in busndx:
                        warning(f"branch '{row[0]}' or '{row[1]}' not a valid bus index",ifile,lineno)

                    # PSSE: I,     J,'CKT',     R,          X,         B,                    'N A M E'                 ,   RATE1,   RATE2,   RATE3,   
                    print(f"""object pypower.branch
{{
    name "{oname}_B_{branchid}_{branchndx[branchid]}"; 
    from "{oname}_N_{row[0]}";
    to "{oname}_N_{row[1]}";
    fbus {busndx[row[0]]};
    tbus {busndx[row[1]]};
    r {row[3]};
    x {row[4]};
    b {row[5]};
    rateA {row[7]} MVA;
    rateB {row[7]} MVA;
    rateC {row[8]} MVA;
    ratio 1.0 pu;
    angle 0.0 deg;
    status IN;
    angmin -360 deg;
    angmax +360 deg;
    {items(row)}
}}""",file=glm)

                elif block == "TRANSFORMER_DATA":

                    if len(rowd) < len(rows):
                        rowd.append(dict(zip(rows[len(rowd)][:len(row)],row)))
                    if float(rowd[0]['K']) > 0:
                        warning("three winding transformers are not supported",ifile,lineno)
                    if ( len(rowd) == len(rows)-1 and float(rowd[0]['K']) == 0 ) or ( len(rowd) == len(rows) and float(rowd[0]['K']) > 0 ): 
                        branchid = f"{rowd[0]['I']}_{rowd[0]['J']}"
                        branchndx[branchid] = branchndx[branchid]+1 if branchid in branchndx else 0
                        xfrmid = f"{rowd[0]['I']}_{rowd[0]['J']}"
                        xfrmndx[xfrmid] = xfrmndx[xfrmid]+1 if xfrmid in xfrmndx else 0
                        rd = []
                        dd = {}
                        for n,r in enumerate(rowd):
                            rd.append(f"""    // ROW {n}:""")
                            rd.extend([f"""    //   {x.replace(' ','').strip("'")} "{y}";""" for x,y in r.items()])
                            dd.update(r)
                        rd = "\n".join(rd)
                        print(f"""object pypower.branch
{{
    name "{oname}_B_{branchid}_{branchndx[branchid]}";
    fbus {busndx[dd['I']]};
    tbus {busndx[dd['J']]};
    status IN;
    object pypower.transformer
    {{
        name "{oname}_T_{xfrmid}_{xfrmndx[xfrmid]}";
        impedance {float(dd['R1-2']):.6g}+{float(dd['X1-2']):.6g}j Ohm;
        phase_shift {float(dd['ANG1']):.5g} deg;
        rated_power {float(dd['SBASE1-2']):.5g} MVA;
        status IN;
    }};
    angmin -360 deg;
    angmax +360 deg;
{rd}
}}""",file=glm)
                        rowd = []

                elif block == "SWITCHED_SHUNT_DATA":

                    mapping = {
                        "MODSW": "control_mode",
                        "ADJM": None,
                        "ST": "status",
                        "VSWHI": "voltage_high",
                        "VSWLO": "voltage_low",
                        "SWREG": "remote_bus",
                        "RMPCT": None,
                        "RMIDNT": None,
                        "BINIT": "admittance",
                        "N1": "steps_1",
                        "B1": "admittance_1",
                        "N2": "steps_2",
                        "B2": "admittance_2",
                        "N3": "steps_3",
                        "B3": "admittance_3",
                        "N4": "steps_4",
                        "B4": "admittance_4",
                        "N5": "steps_5",
                        "B5": "admittance_5",
                        "N6": "steps_6",
                        "B6": "admittance_6",
                        "N7": "steps_7",
                        "B7": "admittance_7",
                        "N8": "steps_8",
                        "B8": "admittance_8",
                        "NREG": None,
                    }
                    converters = {
                        "remote_bus": lambda x: f'"{oname}_N_{x}"',
                        "control_mode": lambda x: ["FIXED","DISCRETE_V","CONTINUOUS_V","DISCRETE_VAR","DISCRETE_VSC","DISCRETE_Y"][int(x)],
                        "voltage_high": lambda x: f"{float(x)} pu",
                        "voltage_low": lambda x: f"{float(x)} pu",
                        "status": lambda x: ["OFFLINE","ONLINE"][int(x)],
                        "admittance": lambda x: f"{float(x)} MVAr",
                        "steps_1" : int,
                        "admittance_1": lambda x: f"{float(x)} MVAr",
                        "steps_2" : int,
                        "admittance_2": lambda x: f"{float(x)} MVAr",
                        "steps_3" : int,
                        "admittance_3": lambda x: f"{float(x)} MVAr",
                        "steps_4" : int,
                        "admittance_4": lambda x: f"{float(x)} MVAr",
                        "steps_5" : int,
                        "admittance_5": lambda x: f"{float(x)} MVAr",
                        "steps_6" : int,
                        "admittance_6": lambda x: f"{float(x)} MVAr",
                        "steps_7" : int,
                        "admittance_7": lambda x: f"{float(x)} MVAr",
                        "steps_8" : int,
                        "admittance_8": lambda x: f"{float(x)} MVAr",
                    }

                    print(f"""object shunt {{ 
    name "{oname}_S_{row[0]}";
    parent "{oname}_N_{row[0]}";""",file=glm)
                    for name,value in zip(fields[block][1:],row[1:]):
                        tag = mapping[name.strip("'")]
                        if tag in converters:
                            value = converters[tag](value)
                        else:
                            value = f'"{value}"'
                        print(f"""    {tag if tag else "// " + name.strip("'")} {value};""",file=glm)
                    print(f"""}}""",file=glm)

                elif row[0] == "Q":

                    print(f"""// END OF INPUT FILE {ifile}""",file=glm)
                    break

                else:

                    oclass = f"""psse_{block.replace("_DATA","").lower()}"""
                    if block not in ocount:
                        ocount[block] = ocount[block]+1 if block in ocount else 0
                        print(f"class {oclass} {{ // runtime definition",file=glm)
                        for field in fields[block][1:]:
                            ftype = 'char1024' if field[0] == "'" else 'double'
                            print(f"""    {ftype} {field.replace("'","")};""",file=glm)
                        print("}",file=glm)
                        warning(f"""GLM class {oclass} defined at runtime, incomplete model conversion possible""",ifile,lineno)
                    print(f"""object {oclass} {{ 
    name "{oname}_{oclass.upper()}_{row[0]}";""",file=glm)
                    for name,value in zip(fields[block][1:],row[1:]):
                        print(f"""    {name.replace("'","")} "{value}";""",file=glm)
                    print(f"""}}""",file=glm)

if __name__ == '__main__':
    main()

