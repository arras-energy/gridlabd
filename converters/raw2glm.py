import json 
import os 
import sys, getopt
import datetime
import importlib, copy
from importlib import util
import csv
from math import cos, sin

if os.path.exists("autotest/wecc240.raw") and len(sys.argv) == 1:
    sys.argv.extend(["-i","autotest/wecc240.raw","-o","autotest/wecc240.glm"])

config = {"input":"raw","output":"glm","type":[],"format":[]}

def help():
    return """raw2glm.py -i <inputfile> -o <outputfile> [options...]
    -c|--config               output converter configuration data
    -h|--help                 output this help
    -i|--ifile <FILENAME.raw> [REQUIRED] PY input file
    -o|--ofile <FILENAME.glm> [OPTIONAL] GLM output file name
    -N|--name <STRING>        [OPTIONAL] object name prefix (default is output
                              file name)
"""

def main():
    filename_raw = None
    filename_glm = None
    prefix = None
    try : 
        opts, args = getopt.getopt(sys.argv[1:],
            "chi:o:N:",
            ["config","help","ifile=","ofile=",'name='],
            )
    except getopt.GetoptError:
        sys.exit(2)
    if not opts : 
        print('ERROR [raw2glm.py]: missing command arguments')
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-c","--config"):
            print(config)
            sys.exit()
        elif opt in ("-h","--help"):
            print(help())
            sys.exit()
        elif opt in ("-i", "--ifile"):
            filename_raw = arg
        elif opt in ("-o", "--ofile"):
            filename_glm = arg
        elif opt in ("-N", "--name"):
            prefix = arg
        else : 
            print(f"ERROR [raw2glm.py]: {opt}={arg} is not a valid option")
            sys.exit(1)

    if not filename_raw:
        print(f"ERROR [raw2glm.py]: input filename not specified")
        sys.exit(1)

    try:
        convert(
            ifile = filename_raw,
            ofile = filename_glm,
            options = dict(prefix = prefix),
            )
    except Exception as err:
        print(f"ERROR [raw2glm.py]: {err}")
        import traceback
        traceback.print_exception(err,file=sys.stderr)
        sys.exit(9)

def convert(ifile,ofile,options={}):
    """Default converter PSS/E RAW file (version 34-ish)"""

    data = dict(
        version = 2, 
        baseMVA = 100.0,
        comment = '',
        bus = [],
        branch = [],
        gen = [],
        )

    busndx = {}
    genndx = {}
    branchndx = {}
    bus_S = {}
    bus_V = {}
    oname = options['prefix'] if 'prefix' in options and not options['prefix'] is None else os.path.splitext(os.path.basename(ofile))[0]
    with open(ofile,"w") as glm:

        print(f"// generated by {' '.join(sys.argv)}",file=glm)
        with open(ifile,"r") as raw:

            reader = csv.reader(raw,delimiter=',',quotechar="'")
            block = None
            for values in reader:
                row = [x.strip() for x in values]

                if row[0].startswith("@!"): # comment
                    pass
                elif row[0] == '0': # system-wide data
                
                    block = 'SYSTEM_DATA'
                    print(f"""module pypower 
{{
    version 2;
    baseMVA {row[1]};
    // {row[5]}
}}
""",file=glm)
                    data['baseMVA'] = float(row[1])
                    comment = row[5]
                
                elif row[0].startswith('0 / END'): # next data block
                
                    if len(row) > 1 and row[1].startswith("BEGIN "):
                        block = row[1][6:].replace(' ','_')
                    else:
                        block = None
                
                elif block == 'SYSTEM_DATA':
                    print(f"// {row[0]}",file=glm);
                
                elif block == 'BUS_DATA':

                    # PSSE: id,name,baseKV,type,area,zone,Vm,Va,gen.r,gen.i,ld.r,ld.i
                    # GLM: "bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin",
                    bus_i = len(busndx)+1
                    busndx[row[0]] = bus_i
                    bus_S[row[0]] = complex(0,0)
                    Vm = float(row[7])
                    Va = float(row[8])
                    bus_V[row[0]] = complex(Vm*cos(Va*3.1416/180),Vm*sin(Va*3.1416/180))
                    typemap = ['UNKNOWN','PQ','PV','REF','NONE','PQREF'] # map PSSE bus types to pypower bus types
                    print(f"""object pypower.bus 
{{
    name "{oname}_bus_{row[0]}"; 
    // NAME "{row[1]}";
    bus_i {bus_i};
    baseKV {row[2]} kV;
    type {typemap[int(row[3])]}; 
    area {row[4]};
    zone {row[5]};
    // ROW[6] "{row[6]}";
    Vm {row[7]} kV;
    Va {row[8]} deg;
    Pd {float(row[9])-float(row[11])} MW;
    Qd {float(row[10])-float(row[12])} MVAr;
}}""",file=glm)

                elif block == 'LOAD_DATA':

                    if not row[0] in busndx:
                        print(f"WARNING [raw2glm.py]: load '{row[0]}' not a valid bus index")

                    # PSSE: I,'ID',STAT,AREA,ZONE,      PL,        QL,        IP,        IQ,        YP,        YQ, OWNER,SCALE,INTRPT,  DGENP,     DGENQ, DGENF
                    try:
                        Z = complex(1,0)/complex(float(row[9]),float(row[10]))
                    except:
                        Z = complex(0,0)
                    I = complex(float(row[7]),float(row[8]))
                    P = complex(float(row[5]),float(row[6])) + complex(float(row[14]),float(row[15]))
                    response = 1 - float(row[12])
                    status = "ONLINE" if float(row[13]) == 0.0 else "CURTAILED"
                    V = bus_V[row[0]]
                    bus_S[row[0]] += P + V*I.conjugate()
                    if Z.real != 0.0 and Z.imag != 0.0:
                        bus_S[row[0]] += V.conjugate()*V/Z.conjugate()
                    print(f"""object pypower.load
{{
    name "{oname}_load_{row[0]}"; // ID = '{row[1]}'
    parent "{oname}_bus_{row[0]}";
    status "{"ONLINE" if row[2] == 1 else "OFFLINE"}";
    // AREA "{row[3]}";
    // ZONE "{row[4]}";
    Z {Z.real:.4g}{Z.imag:+.4g}j Ohm;
    I {I.real:.4g}{I.imag:+.4g}j A;
    P {P.real:.4g}{P.imag:+.4g}j MVA;
    // OWNER "{row[11]}";
    // SCALE "{row[12]}";
    // INTRPT "{row[13]}";
    status {status};
    response {response};
    // DGENF "{row[16]}";
}}
modify {oname}_bus_{row[0]}.Pd {bus_S[row[0]].real:.6g};
modify {oname}_bus_{row[0]}.Qd {bus_S[row[0]].imag:.6g};
""",file=glm)

                elif block == "GENERATOR_DATA":

                    genid = int(row[0])
                    genndx[genid] = genndx[genid]+1 if genid in genndx else 0
                    if not row[0] in busndx:
                        print(f"WARNING [raw2glm.py]: gen '{row[0]}' not a valid bus index")
                    # PSSE: I,'ID',      PG,        QG,        QT,        QB,     VS,    IREG,     MBASE,     ZR,         ZX,         RT,         XT,     GTAP,STAT, RMPCT,      PT,        PB,    O1,    F1,  O2,    F2,  O3,    F3,  O4,    F4,WMOD, WPF,NREG
                    print(f"""object pypower.gen
{{
    name "{oname}_gen_{row[0]}_{genndx[genid]}";
    // ID {row[1]};
    bus {busndx[row[0]]};
    Pg {row[2]} MW;
    Qg {row[3]} MVAr;
    // QT "{row[4]}";
    // QB "{row[5]}";
    Vg {row[6]} pu*V;
    // IREG "{row[7]}";
    mBase {row[8]} MVA;
    // ZR "{row[9]}";
    // ZX "{row[10]}";
    // RT "{row[11]}";
    // XT "{row[12]}";
    // GTAP "{row[13]}";
    // STAT "{row[14]}";
    // RMPCT "{row[15]}";
    // PT "{row[16]}";
    // PB "{row[17]}";
    // O1 "{row[18]}";
    // F1 "{row[19]}";
    status IN_SERVICE;
}}""",file=glm)

                elif block == "BRANCH_DATA":

                    branchid = f"{row[0]}_{row[1]}"
                    branchndx[branchid] = branchndx[branchid]+1 if branchid in branchndx else 0
                    if not row[0] in busndx or not row[1] in busndx:
                        print(f"WARNING [raw2glm.py]: branch '{row[0]}' or '{row[1]}' not a valid bus index")

                    # PSSE: I,     J,'CKT',     R,          X,         B,                    'N A M E'                 ,   RATE1,   RATE2,   RATE3,   
                    print(f"""object pypower.branch
{{
    name "{oname}_branch_{branchid}_{branchndx[branchid]}"; 
    fbus {busndx[row[0]]};
    tbus {busndx[row[1]]};
    // CKT "{row[2]}";
    r {row[3]};
    x {row[4]};
    b {row[5]};
    // NAME '{row[6]}'
    rateA {row[7]} MVA;
    rateB {row[8]} MVA;
    rateC {row[9]} MVA;
    ratio 1.0 pu;
    angle 0.0 deg;
    status IN;
    angmin -360 deg;
    angmax +360 deg;
}}""",file=glm)

                else:

                    # gen = "bus Pg Qg Qmax Qmin Vg mBase status Pmax Pmin Pc1 Pc2 Qc1min"\
                    #     + " Qc1max Qc2min Qc2max ramp_agc ramp_10 ramp_30 ramp_q apf",
                    # branch = "fbus tbus r x b rateA rateB rateC ratio angle status angmin angmax",
                    print(f"WARNING [raw2glm.py]: {block} block converter not implemented")

if __name__ == '__main__':
    main()

