#!/bin/bash
##
## Syntax: gridlabd marimo [OPTIONS ...] [COMMAND] [NOTEBOOK]
## 
## Options:
## 
## * `--debug`: send log to /dev/stderr
## 
## * `-h|--help|help`: get this help
## 
## * `--pid`: get the process id for the notebook (if any)
## 
## * `-R|--repo`: change marimo repository (default `arras-energy/marimo`)
## 
## * `--upgrade`: upgrade marimo to latest version
## 
## * `--url`: get the URL for the notebook (if any)
## 
## * `--verbose`: echo script to stderr
## 
## * `--wait`: wait for marimo server to exit
## 
## * `-W|--workdir`: change work directory (default `gridlabd-marimo`)
## 
## Commands:
## 
## * `edit NOTEBOOK`: open the notebook in the marimo editor
## 
## * `index`: get list of available notebooks that can be downloaded
## 
## * `list`: list open marimo notebooks
## 
## * `status`: list details of active notebooks
## 
## * `stop NOTEBOOK`: stops the marimo notebook
## 
## Run a gridlabd marimo notebook.
## 
## GridLAB-D marimo notebooks are distributed from the GitHub arras-energy
## repository `marimo`.
##
## Caveats:
## 
## * Notebook servers stay active until they are stopped, even if you close
##   the browser window.
## 
## * The `stop` command cannot stop notebooks opened with the `edit` command.
##   These can only be stopped by directly interrupting the server or using
##   the shutdown `(x)` button in the browser.
## 
## * Master branches only return the "official" index published in
##   `source/.index`. All other branches return a list of all Python files in
##   `source/`.
## 
## See also:
## 
## * https://github.com/arras-energy/marimo
## * https://docs.marimo.io/
## 

LIB=$GLD_ETC/marimo
LOG=$LIB/marimo.log
WAIT=no
WORKDIR=gridlabd-marimo

E_OK=0
E_SYNTAX=1
E_FAIL=2
E_NOTFOUND=3
E_MISSING=4

function repo()
{
    if [ $# -eq 0 ]; then
        error "missing repo name" E_MISSING
    fi
    URL=https://raw.githubusercontent.com/$1/refs/heads/main/source
    API=https://api.github.com/repos/$1/contents/source
    GIT=https://github.com/$1
}
repo arras-energy/marimo

function error()
{
    # error MESSAGE [EXITCODE]
    #
    # Display an error message and optionally exit with EXITCODE
    #
    echo "ERROR: $1" > /dev/stderr
    test -z "$2" || exit $(eval 'echo $'$2)
}

function warning()
{
    # warning MESSAGE
    #
    # Display a warning message and optionally exit with EXITCODE
    #
    echo "WARNING: $1" > /dev/stderr    
}

function index()
{
    # index
    #
    # Display a list of available notebooks online
    #
    if [ "$(gridlabd.bin --version=branch)" == "master" ]; then
        curl -sL -H 'Cache-Control: no-cache' $URL/.index 2>>$LOG
    else
        curl -sL -H 'Cache-Control: no-cache' $API 2>>$LOG | grep '"name": ".*\.py",' | cut -f2 -d: | cut -f1 -d. | tr -cd "A-Za-z0-9_\\n"
    fi
}

function getlist()
{
    basename -s .py $(ps -ax | grep bin/marimo | grep -v grep | sed -r 's/ +/ /g' | rev | cut -f1 -d'/' | rev ) 2>>$LOG
}

function getpid()
{
    EXE=$LIB/$1.py
    ps ax | grep bin/marimo | grep $EXE | cut -f1 -d' ' 2>>$LOG
}

function geturl()
{
    PID=$(getpid $1)
    if [ ! -z "$PID" ]; then
        LOC=$(lsof -i -P -a -p $PID | grep '(LISTEN)' | sed -r 's/ +/ /g' | cut -f9 -d' ' 2>>$LOG)
        echo "http://$LOC/"
    fi
}

function download()
{
    EXE=$LIB/$1.py
    ETAG=$LIB/.etag/$1
    if [ ! -f $EXE ]; then
        if [ -z "$(index | grep $1)" ]; then
            error "no such notebook published" E_NOTFOUND
        else
            rm -f $ETAG 2>>$LOG
        fi
    fi
    if [ -f $ETAG ]; then
        curl -sL -H 'Cache-Control: no-cache' --etag-compare $ETAG --etag-save $ETAG $URL/$1.py > $EXE 2>>$LOG
    else
        curl -sL -H 'Cache-Control: no-cache' --etag-save $ETAG $URL/$1.py > $EXE 2>>$LOG
    fi
    if [ $? -ne 0 ]; then
        cat $EXE >>$LOG
        rm -f $EXE $ETAG 2>>$LOG
        error "unable to download '$1'" E_FAIL
    fi    
}

function start()
{
    EXE=$LIB/$1.py
    if [ ! -f $EXE ]; then
        error "$1 not found" E_NOTFOUND
    fi
    if [ $WAIT == no ]; then
        marimo run $EXE 1>>$LOG 2>&1 &
    else
        marimo run $EXE 2>>$LOG
    fi
}

function stop()
{
    if [ $# -eq 0 ]; then
        error "stop missing notebook name" E_MISSING
    fi
    PID=$(getpid $1)
    if [ ! -z "$PID" ]; then
        kill $PID
    fi
}

function edit()
{
    if [ $# -eq 0 ]; then
        error "missing notebook name" E_MISSING
    elif [ "$(gridlabd.bin --version=branch)" == "master" ]; then
        error "you must use a development version of gridlabd" E_FAIL
    fi
    if [ -d "$WORKDIR" ]; then
        ORIGIN=$(cd "$WORKDIR"; git remote get-url origin)
        if [ "$URL" != "$ORIGIN" ]; then
            warning "repository '$GIT' does not match '$WORKDIR' origin '$ORIGIN', unable to pull"
        elif [ ! -d "$WORKDIR/.git" ]; then
            warning "'$WORKDIR' is not a git repository (you cannot commit changes), unable to pull"
        else
            ( cd "$WORKDIR" ; git pull )
        fi
    else
        git clone $GIT "$WORKDIR" || error "clone failed" E_FAIL
    fi
    if [ ! -d "$WORKDIR/source" ]; then
        error "clone failed" E_FAIL
    else
        if [ ! -f "$WORKDIR/source/$1.py" ]; then
            echo "Creating '$WORKDIR/source/$1.py'"
        fi
        echo "Opening marimo notebook..." >/dev/stderr
        ( cd "$WORKDIR/source" ; marimo edit "$1.py" )
    fi
    if [ -d "$WORKDIR/.git" ]; then
        warning "don't forget to add/commit/push changes to '$WORKDIR' when done editing"
    fi
}

function open()
{
    LOC=$(geturl $1)
    if [ -z "$LOC" ]; then
        download $1
        start $1
    else
        open $LOC
    fi

}

function status()
{
    LIST=$(getlist)
    if [ ! -z "$LIST" ]; then
        FORMAT="%-16.16s %-6.6s %-32.32s\n"
        printf "$FORMAT" Name PID URL
        printf "$FORMAT" ---------------- ------ --------------------------------
        for APP in $LIST; do
            APPPID=$(getpid $APP)
            APPURL=$(geturl $APP)
            printf "$FORMAT" $APP $APPPID $APPURL
        done
    fi
}

mkdir -p $LIB/.etag
echo "*** COMMAND = '$0 $*' ***" >>$LOG

if [ $# -eq 0 ]; then
    grep '^## ' $0 | cut -c4-
    exit $E_SYNTAX
fi

if [ -z "$GLD_ETC" ]; then
    error "missing gridlabd environment" E_MISSING
fi

while [ $# -gt 0 ]; do
    case $1 in
        --debug)
            LOG=/dev/stderr
            ;;
        --help|-h|help)
            cat $0 | grep '^## ' | cut -c4-
            exit $E_OK
            ;;
        --pid)
            getpid $2
            shift 1
            ;;
        -R|--repo)
            repo $2
            shift 1
            ;;
        --upgrade)
            python3 -m pip install --upgrade marimo
            shift 1
            ;;
        --url)
            geturl $2
            shift 1
            ;;
        --verbose)
            set -x
            ;;
        --wait)
            WAIT=yes
            ;;
        -W|--workdir)
            if [ $# -eq 1 ]; then
                error "missing folder name" E_MISSING
            fi
            WORKDIR=$2
            shift
            ;;
        index) # list of available apps
            index
            exit $E_OK
            ;;
        status)
            status
            exit $E_OK
            ;;
        list) # list of active apps
            getlist
            exit $E_OK
            ;;
        stop)
            stop $2
            shift 1
            ;;
        edit)
            edit $2
            shift 1
            ;;
        -*)
            error "option '$1' is invalid" E_SYNTAX
            ;;
        *)
            open $1
            ;;
    esac
    shift 1
done
