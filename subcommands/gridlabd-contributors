''':'
exec "$GLD_BIN/python3" "$0" "$@"
:' '''
# Syntax: contributors [<options>]
## GridLAB-D contributors
## 
## SYNTAX
## 
##  gridlabd contributions [OPTIONS ...]
## 
## OPTIONS
## 
##  -c|--csv        Output result as CSV file
##  -h|--help|help  Get this help text
## 
##  -k|--known      Limit result to users with known full names only
##                  (default False)
## 
##  -l|--login      Display only github login id (usually faster, default is
##                  False)
## 
##  -q|--quotes "None"|STRING
##                  Place quotes around full names (default is None)
## 
##  -s|--separate "SPACE"|"NEWLINE"|STRING
##                  Separate output using the STRING delimiter (default is NEWLINE)
## 
##  -t|--token TOKEN
##                  Use TOKEN as the github access token (default is content
##                  of ~/.github/access-token)
## 
## DESCRIPTION
## 
## Processes all repositories that contributed source code and extracts all the people
## from whom contributions were received.

import sys, os, github

#
# Update this to reflect all contributing projects
#
REPOSITORIES = [
	"gridlab-d/gridlab-d",
	"arras-energy/gridlabd-old",
	"arras-energy/gridlabd",
	]

E_NONE = None
E_OK = 0
E_INVALID = 1
E_TOKEN = 2
E_EXCEPTION = 9

separator = "\n"
quotes = ""
login = False
known = False
token = None
tocsv = False

def error(msg,code=E_NONE):
	if type(msg) is Exception:
		e_type, e_value, e_trace = sys.exc_info()
		error(e_value,E_EXCEPTION)
	else:
		print(f"ERROR [{sys.argv[0]}]: {msg}",file=sys.stderr)
	if code:
		exit(code)

def output(msg):
	if type(msg) is Exception:
		e_type, e_value, e_trace = sys.exc_info()
		warning(e_value,E_EXCEPTION)
	else:
		print(f"{quotes}{msg}{quotes}",end=separator)

def warning(msg):
	print(f"WARNING [{sys.argv[0]}]: {msg}")

n = 1
while n < len(sys.argv):
	tag = sys.argv[n]
	if n < len(sys.argv)-1:
		value = sys.argv[n+1]
	else:
		value = None
	if tag in ["-h","--help","help"]:
		with open(sys.argv[0],"r") as fh:
			print("".join([line[3:] for line in fh.readlines() if line.startswith("##")]))
		exit(E_OK)
	elif tag in ["-t","--token"]:
		if value == "None":
			token = None
		else:
			token = value
		n += 1
	elif tag in ["-s","--separate"]:
		if value == "SPACE":
			separator = " "
		elif value == "NEWLINE":
			separate = "\n"
		else:
			separator = value
		n += 1
	elif tag in ["-q","--quotes"]:
		if value == None or value == "None":
			quotes = ""
		else:
			quotes = value
		n += 1
	elif tag in ["-k","--known"]:
		known = True
	elif tag in ["-l","--login"]:
		login = True
	elif tag in ["-c","--csv"]:
		tocsv = True
	else:
		error(f"'{tag}' is not valid",code=E_INVALID)
	n += 1

if not token:
	try:
		HOME = os.getenv("HOME")
		with open(f"{HOME}/.github/access-token","r") as fh:
			token = fh.read().strip()
	except Exception as exc:
		warning(exc)
		pass

try:
	git = github.Github(token)

	result = {}
	for repository in REPOSITORIES:
		repo = git.get_repo(repository)
		for user in repo.get_contributors():
			if login:
				result[user.login] = user.login
			elif user.name:
				result[user.login] = quotes + user.name + quotes
			elif not known:
				result[user.login] = f"<user:{user.login}>"

	if tocsv:
		output("id,name")
	for id in result:
		if tocsv:
			output(f"{id},{result[id]}")
		else:
			output(result[id])

except Exception as exc:
	error(exc)
