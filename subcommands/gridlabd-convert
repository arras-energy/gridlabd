''':'
exec "$GLD_BIN/python3" "$0" "$@"
:' '''
# Syntax: convert [[-i|--input] INPUTS] [[-o|--output] OUTPUTS] [-v|--verbose] [-d|--debug] [-f|--from TYPE1] [-t|--to TYPE2] [OPTIONS]
__doc__="""Syntax: onvert [[-i|--input] INPUTS] [[-o|--output] OUTPUTS] [-v|--verbose] [-d|--debug] [-f|--from TYPE1] [-t|--to TYPE2] [OPTIONS]

The convert subcommand is the general GridLAB-D file format converter for command line and macro usage. It can be used as the shell command, e.g., `gridlabd convert ...` or as a GLM macro, e.g., `#convert ...`.

OPTIONS

	-d|--debug           enable debugging traceback output on error
	-f|--from ITYPE      specify the input file type and semantics
	-i|--input INPUTS    specify the output files
	-o|--output OUTPUTS  specify the output files
	-r|--read OPTION     specify a converter read option
	-t|--to OTYPE        specify the output file type and semantics
	-v|--verbose         enable verbose message output
	-w|--write OPTION    specify a converter write option
	OPTION=VALUE         specify a converter option
"""
import sys, os
import importlib
from importlib import util

MODPATH = os.getenv("GLD_ETC")
if not MODPATH:
	MODPATH = "/usr/local/share/gridlabd"

INPUTFILE = None
OUTPUTFILE = None
INPUTTYPE = None
OUTPUTTYPE = None
OPTIONS = {}
VERBOSE = False
DEBUG = False

E_OK = 0
E_SYNTAX = 1
E_MISSING = 2
E_EXCEPTION = 3
def error(msg,exitcode=None):
	print(f"ERROR [gridlabd-convert]: {msg}")
	if not exitcode is None:
		exit(exitcode)

def verbose(msg):
	if VERBOSE:
		print(f"VERBOSE [gridlabd-convert]: {msg}")

SYNTAX = "Syntax: gridlabd convert [[-i|--input] FILE1] [[-o|--output] FILE2] [-v|--verbose] [-d|--debug] [-f|--from TYPE1] [-t|--to TYPE2] [OPTIONS]"
if len(sys.argv) == 1:
	print(SYNTAX)
	exit(1)
n = 1
while n < len(sys.argv):
	if sys.argv[n] in ['-h','--help',"help"]:
		if n+1 < len(sys.argv):
			modname = f'{MODPATH}/{sys.argv[n+1]}.py'
			if os.path.exists(modname):
				verbose(f"loading '{modname}'")
				# modspec = util.spec_from_file_location({modname.split('2')[1]}, modname)
				mod = importlib.import_module(f'{sys.argv[n+1]}')
				print(mod.__doc__)
			else:
				error(f"{modname} not found",E_MISSING)
		else:
			print(SYNTAX)
		exit(0)
	elif sys.argv[n] in ['-v','--verbose']:
		VERBOSE = True
	elif sys.argv[n] in ['-d','--debug']:
		DEBUG = True
	elif sys.argv[n] in ['-f','--from']:
		n += 1
		try:
			INPUTTYPE = sys.argv[n]
		except:
			error("missing input file type",E_MISSING)
	elif sys.argv[n] in ['-t','--to']:
		n += 1
		try:
			OUTPUTTYPE = sys.argv[n]
		except:
			error("missing output file type",E_MISSING)
	elif sys.argv[n] in ['-i','--input']:
		n +=1 
		try:
			INPUTFILE = sys.argv[n]
		except:
			error("missing input file name",E_MISSING)
	elif sys.argv[n] in ['-o','--output']:
		n +=1 
		try:
			OUTPUTFILE = sys.argv[n]
		except:
			error("missing output file name",E_MISSING)
	elif sys.argv[n] in ['-r','--read']:
		n +=1 
		specs = sys.argv[n].split('=')
		if len(specs) == 1:
			OPTIONS[specs[0]] = None
		else:
			OPTIONS[specs[0]] = 'read.' + '='.join(specs[1:])
	elif sys.argv[n] in ['-w','--write']:
		n +=1 
		specs = sys.argv[n].split('=')
		if len(specs) == 1:
			OPTIONS[specs[0]] = None
		else:
			OPTIONS[specs[0]] = 'write.' + '='.join(specs[1:])
	elif not INPUTFILE:
		INPUTFILE = sys.argv[n]
	elif not OUTPUTFILE:
		OUTPUTFILE = sys.argv[n]
	else:
		specs = sys.argv[n].split('=')
		if len(specs) == 1:
			OPTIONS[specs[0]] = True
		else:
			OPTIONS[specs[0]] = '='.join(specs[1:])
	n += 1


if not INPUTFILE:
	if not INPUTTYPE:
		error("input type must be specified when using stdin",E_MISSING)
	else:
		INPUTFILE = "/dev/stdin"
else:
	# convert input files spec to dict if possible
	try:
		INPUTFILE = dict([x.split(":") for x in INPUTFILE.split(",")])
	except:
		if not INPUTTYPE:
			INPUTTYPE = os.path.splitext(INPUTFILE)[1][1:]
	if type(INPUTFILE) is dict and not INPUTTYPE:
		error("input type must be specified when using multiple input files",E_MISSING)

if not OUTPUTFILE:
	if not OUTPUTTYPE:
		error("output type must be specified when using stdout",E_MISSING)
	else:
		OUTPUTFILE = "/dev/stdout"
else:
	# convert output files spec to dict if it possible
	try:
		OUTPUTFILE = dict([x.split(":") for x in OUTPUTFILE.split(",")])
	except:
		if not OUTPUTTYPE:
			OUTPUTTYPE = os.path.splitext(OUTPUTFILE)[1][1:]
	if type(OUTPUTFILE) is dict and not OUTPUTTYPE:
		error("input type must be specified when using multiple input files",E_MISSING)

modname = f'{MODPATH}/{INPUTTYPE}2{OUTPUTTYPE}.py'
if os.path.exists(modname):
	verbose(f"loading '{modname}'")
	mod = importlib.import_module(f'gridlabd.{INPUTTYPE}2{OUTPUTTYPE}')
	verbose(f"calling {modname}.convert({INPUTFILE.__repr__()},{OUTPUTFILE.__repr__()},{OPTIONS.__repr__()})")
	try:
		mod.convert(INPUTFILE,OUTPUTFILE,OPTIONS)
	except Exception as err:
		if DEBUG:
			raise
		else:
			error(err,E_EXCEPTION)
else:
	error(f"{modname} not found")

