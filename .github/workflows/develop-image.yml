name: develop-images

on:
  push:
    branches: [ develop ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:

  updateS3websites:
    runs-on: ubuntu-24.04
    environment: Integration

    steps:
    - uses: actions/checkout@v4

      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developWebsiteSyncWorkflow
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Website s3 sync
      run: |
        aws s3 sync ./cloud/websites/code.arras.energy/ s3://code-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/docs.arras.energy/ s3://docs-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/geodata.arras.energy/ s3://geodata-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/install.arras.energy/ s3://install-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/status.arras.energy/ s3://status-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/tutorials.arras.energy/ s3://tutorials-dev.arras.energy --acl public-read
        aws s3 sync ./cloud/websites/www.arras.energy/ s3://www-dev.arras.energy --acl public-read

    - name: Run CF invalidation
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CF_ID }} --paths '/*'

  buildMacos13FastS3:

    runs-on: macos-13
    environment: Integration

    steps:
    - uses: actions/checkout@v4

      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developImagesMacos13Update
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Symlink for libtool
      run: |
        ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
        ln -s /usr/local/bin/glibtool /usr/local/bin/libtool

    - name: Add libraries to PATH
      run: |
        echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix)/opt:$(brew --prefix)/include" >> $GITHUB_ENV

    - name: Deploy to S3
      run: |
        sh ./setup.sh --local
        sh ./build.sh --system --parallel --upload --release

  buildMacos14FastS3:

    runs-on: macos-14
    environment: Integration

    steps:
    - uses: actions/checkout@v4

      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developImagesMacos14Update
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Symlink for libtool
      run: |
        ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
        ln -s /usr/local/bin/glibtool /usr/local/bin/libtool

    - name: Add libraries to PATH
      run: |
        echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix)/opt:$(brew --prefix)/include" >> $GITHUB_ENV

    - name: Deploy to S3
      run: |
        sudo mkdir -p /usr/local/opt/gridlabd
        sudo chmod 2777 /usr/local/opt/gridlabd
        brew install gdal
        sh ./setup.sh --local
        sh ./build.sh --system --parallel --upload --release

  buildMacos15FastS3:

    runs-on: macos-15
    environment: Integration

    steps:
    - uses: actions/checkout@v4

      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developImagesMacos15Update
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Symlink for libtool
      run: |
        ln -s /usr/local/bin/glibtoolize /usr/local/bin/libtoolize
        ln -s /usr/local/bin/glibtool /usr/local/bin/libtool

    - name: Add libraries to PATH
      run: |
        echo "LIBRARY_PATH=$(brew --prefix)/lib:$(brew --prefix)/opt:$(brew --prefix)/include" >> $GITHUB_ENV

    - name: Deploy to S3
      run: |
        sudo mkdir -p /usr/local/opt/gridlabd
        sudo chmod 2777 /usr/local/opt/gridlabd
        brew install gdal
        sh ./setup.sh --local
        sh ./build.sh --system --parallel --upload --release

  buildUbuntu22FastS3:

    runs-on: ubuntu-22.04
    environment: Integration
    container:
      image: ubuntu:jammy

    steps:
      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership and prep container
      run: |
        mkdir -p /usr/local/var
        apt-get update && apt-get install -y apt-transport-https
        apt-get install -y git curl nano sudo zip
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install

    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developImagesUbuntu22Update
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3
      run: |
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        chown -R root $PWD
        sh ./setup.sh --local
        sh ./build.sh --system --parallel
        gridlabd python -m pip install awscli
        sh ./build.sh --upload --release

  buildUbuntu24FastS3:

    runs-on: ubuntu-24.04
    environment: Integration
    container:
      image: ubuntu:noble

    steps:
      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership and prep container
      run: |
        mkdir -p /usr/local/var
        apt-get update && apt-get install -y apt-transport-https
        apt-get install -y git curl nano sudo zip
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install

    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developImagesUbuntu24Update
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to S3
      run: |
        export GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        chown -R root $PWD
        sh ./setup.sh --local
        sh ./build.sh --system --parallel
        ln -sf /usr/bin/python3.10 /usr/local/opt/gridlabd/current/bin/python3.10
        gridlabd python -m pip install awscli
        sh ./build.sh --upload --release

  buildUbuntuDockerhub:

    runs-on: ubuntu-24.04
    environment: Integration
    needs: buildUbuntu24FastS3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: developDockerhubDeploymentWorkflow
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run CF invalidation
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CF_ID }} --paths '/*'

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./docker/packer/Dockerfile.dev.ul
        push: true
        tags: lfenergy/arras:develop

  buildAWSUbuntuAMI:
    runs-on: ubuntu-24.04
    environment: Integration
    needs: [buildUbuntu24FastS3,buildMacos13FastS3]

    steps:
    - uses: actions/checkout@v4

      # this is to fix GIT not liking owner of the checkout dir
    - name: Set ownership
      run: |
        chown -R $(id -u):$(id -g) $PWD

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run CF invalidation
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CF_ID }} --paths '/*'

    - name: Set output
      run: |
        echo "VERSION=Arras Energy HiPAS GridLAB-D $(./build-aux/version.sh --version) (Developer)" >> $GITHUB_ENV
        echo "TAGNAME=gridlabd/$(./build-aux/version.sh --version)-$(./build-aux/version.sh --number)-$(./build-aux/version.sh --branch)" >> $GITHUB_ENV

    - name: Install Packer
      run: |
        wget https://releases.hashicorp.com/packer/1.7.6/packer_1.7.6_linux_amd64.zip
        unzip packer_1.7.6_linux_amd64.zip
        sudo mv packer /usr/local/bin

    - name: Initialize Packer
      run: |
        packer init ./docker/packer/templateDevelop.pkr.hcl

    - name: Build AMI Image
      run: |
        packer build \
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
          -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "version=${{ env.VERSION }}" \
          -var "tagname=${{ env.TAGNAME }}" \
          ./docker/packer/templateDevelop.pkr.hcl

#  versionUpdate:
#
#    runs-on: ubuntu-24.04
#    environment: Integration
#    needs: buildAWSUbuntuAMI

#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4

#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE }}
#          role-session-name: developImagesLambdaUpdate
#          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Install dependencies and package Lambda function
#        run: |
#          pip install -r ./cloud/websites/version.arras.energy/lambda/requirements.txt -t ./cloud/websites/version.arras.energy/lambda/package
#          cd ./cloud/websites/version.arras.energy/lambda/package
#          zip -r ../lambda.zip .
#          cd ..
#          zip -r lambda.zip app.py

#      - name: Update Lambda image version_handler
#        run: |
#          aws lambda update-function-code --function-name version_handler --zip-file fileb://$(pwd)/cloud/websites/version.arras.energy/lambda/lambda.zip

#      - name: Update Lambda image update_latest
#        run: |
#          aws lambda update-function-code --function-name update_latest --zip-file fileb://$(pwd)/cloud/websites/version.arras.energy/lambda/lambda.zip

#      - name: Make POST request to version.arras.energy/update
#        run: |
#          version=$(./build-aux/version.sh --version)
#          build=$(./build-aux/version.sh --number)
#          branch=$(./build-aux/version.sh --branch)
          # curl -f -X POST "https://version.arras.energy/update_latest" \
          #   -H "Content-Type: application/json" \
          #   -d "{\"version\": \"$version\", \"build\": \"$build\", \"branch\": \"$branch\", \"sk\": \"${{ secrets.DEVELOPSK }}\"}"
